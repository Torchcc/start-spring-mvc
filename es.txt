
# index type mapping

# dangdang product {id,title,price,createdate,des}

PUT /dangdang
{
  "mappings": {
    "product":{
      "properties":{
        "id":{
          "type":"keyword"
          
        },
        "title":{
          "type":"keyword"
        },
        "price":{
          "type":"double"
        },
        "createdate":{
          "type":"date"
        },
        "des":{
          "type":"text"
        }
      }
    }
  }
}

# index  mappings
GET /dangdang/_mapping


# document 添加文档  指定_id
PUT /dangdang/product/1
{
  "id":"1",
  "title":"iphone12",
  "price":2300.23,
  "createdate":"2012-12-12",
  "des":"这是一个特别好的iphone,超级新品!!"
}

# 添加文档自动生成id
POST /dangdang/product/
{
  "title":"iphone12",
  "price":2300.23,
  "createdate":"2012-12-12",
  "des":"这是一个特别好的iphone,超级新品!!"
}

# 根据_id获取文档
GET /dangdang/product/1
GET /dangdang/product/esFxjnUB3eol631XBVi8

# 更新文档  doc
POST /dangdang/product/1/_update
{
  "doc":{
    "title":"iphone14",
    "categroy":"苹果"
  }
}

# 更新文档 script
POST /dangdang/product/1/_update
{
  "script":"ctx._source.price += 5"
}

# 删除操作 基于_id进行删除
DELETE /dangdang/product/1

#　批量更新文档  3 e8Esj3UB3eol631XkVgj
PUT /dangdang/product/_bulk
{"index":{"_id":"5"}}
  {"title":"超短连衣裙","price":2300,"createdate":"2012-12-12","des":"这是非常不错裙子!!"}
{"index":{}}
  {"title":"耐克","price":2300.34,"createdate":"2012-12-12","des":"这是非常不错鞋子!!"}
  

GET /dangdang/product/5

# 再一次批量中更新 添加 删除
POST /dangdang/product/_bulk
{"index":{"_id":"10"}}
  {"title":"大苹果","price":2300,"createdate":"2012-12-12","des":"非常大的苹果!"}
{"update":{"_id":"e8Esj3UB3eol631XkVgj"}}
  {"doc":{"title":"超级大的品牌耐克"}}
{"delete":{"_id":"5"}}



# URL 查询方式  查询所有文档  query=>q

GET /dangdang/product/_search?q=*
# URL 基于某个字段进行查询   q=字段名:检索值
GET /dangdang/product/_search?q=title:iphone12

#URL 查询所有 返回20条 默认返回10条 size
GET /dangdang/product/_search?q=*&size=20

#URL 分页查询  from 起始条数  size 每页显示记录数
GET /dangdang/product/_search?q=*&from=(2-1)*2&size=2
 
# URL 排序 sort=price  asc 升序   desc 降序
GET /dangdang/product/_search?q=*&sort=price:desc

# URL 检索 指定返回的字段信息_source
GET /dangdang/product/_search?q=*&sort=price:desc&_source=title,des,price


#　Query DSL  ES 特定领域查询语言  requestBody 查询   GET /索引/类型/_search{}
GET /dangdang/product/_search
{
  "query": {
    "match_all": {}
  }
}

# 查询并排序
GET /dangdang/product/_search
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "price": {
        "order": "asc"
      }
    }
  ]
}

# 查询所有 排序 返回指定条数size
GET /dangdang/product/_search
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "price": {
        "order": "desc"
      }
    }
  ],
  "size": 2,
  "from": 6,
  "_source": ["title","price"]
}
PUT /ems
{
  "mappings":{
    "emp":{
      "properties":{
        "name":{
          "type":"text"
        },
        "age":{
          "type":"integer"
        },
        "bir":{
          "type":"date"
        },
        "content":{
          "type":"text"
        },
        "address":{
          "type":"keyword"
        }
      }
    }
  }
}

GET /ems/_mapping

PUT /ems/emp/_bulk
  {"index":{}}
  {"name":"小黑","age":23,"bir":"2012-12-12","content":"为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平","address":"北京"}
  {"index":{}}
  {"name":"王小黑","age":24,"bir":"2012-12-12","content":"Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式","address":"上海"}
  {"index":{}}
  {"name":"张小五","age":8,"bir":"2012-12-12","content":"Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善","address":"无锡"}
  {"index":{}}
  {"name":"win7","age":9,"bir":"2012-12-12","content":"Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？","address":"南京"}
  {"index":{}}
  {"name":"梅超风","age":43,"bir":"2012-12-12","content":"Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API","address":"杭州"}
  {"index":{}}
  {"name":"张无忌","age":59,"bir":"2012-12-12","content":"ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口","address":"北京"}





# term 查询  
GET /ems/emp/_search
{
  "query": {
    "term": {
      "content": { 
        "value": "架"
      }
    }
  },
  "sort": [
    {
      "age": {
        "order": "desc"
      }
    }
  ]
}

GET /ems/emp/_search
{
  "query": {
    "match_all": {}
  }
}
#　range  范围查询 gte 大于等于 gt 大于  lte 小于等于 lt 小于
GET /ems/emp/_search
{
  "query": {
    "range": {
      "age": {
        "gt": 8,  
        "lt": 24
      }
    }
  }
}


# prefix 前缀查询  like  value%
GET /ems/emp/_search
{
  "query": {
    "prefix": {
      "address": {
        "value": "北"
      }
    }
  }
}

# wildcard 通配符查询  ? 匹配一个任意字符   *用来任意多个字符

GET /ems/emp/_search
{
  "query": {
    "wildcard": {
      "content": {
        "value": "为*"
      }
    }
  }
}


# ids 获取一组id对应文档数据

GET /ems/emp/_search
{
  "query": {
    "ids": {
      "values": ["hMGDj3UB3eol631XR1iI","hsGDj3UB3eol631XR1iI","h8GDj3UB3eol631XR1iI"]
    }
  }
}


# fuzzy 模糊查询    跟关键字长度有一定关系 0-2 完全匹配  3-5 1错误  >5 最多2个错误
GET /ems/emp/_search
{
  "query": {
    "fuzzy": {
      "content": "redix"
    }
  }
}


#　boolean 查询   高级查询 组合之前所有查询

GET /ems/emp/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "name": {
              "value": "小"
            }
          }
        }
      ],
      "must_not": [
        {
          "prefix": {
            "content": {
              "value": "hehe"
            }
          }
        }
      ]
    }
  }
}


# 多字段检索  multi_match
GET /ems/emp/_search
{
  "query": {
    "multi_match": {
      "query": "框",
      "fields": ["name","content"]
    }
  }
}

# 多字段分词检索 query_string
GET /ems/emp/_search
{
  "query": {
    "query_string": {
      "query": "我想要学习一个框架技术",
      "fields": ["name","content"]
    }
  }
}
